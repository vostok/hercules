swagger: '2.0'
info:
  description: 'Management api for Hercules. Uses for create, modify, delete streams and timelines'
  version: 1.6.0-SNAPSHOT
  title: Hercules management API
host: 'vm-hercules05:6309'
schemes:
  - http
paths:
  /ping:
    get:
      summary: Ping
      description: Check server status
      operationId: ping
      responses:
        '200':
          $ref: '#/responses/success'
  /about:
    get:
      summary: About
      description: Check server description
      operationId: about
      responses:
        '200':
          description: Info about service
          schema:
            $ref: '#/definitions/about'
  /streams/create:
    post:
      tags:
        - stream
      summary: Create stream
      description: Create stream
      operationId: createStream
      parameters:
        - $ref: '#/parameters/apiKey'
        - name: body
          in: body
          description: CreateStreamRequest
          schema:
            $ref: '#/definitions/stream'
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/managementRulesIsAbsent'
        '403':
          $ref: '#/responses/forbidden'
        '409':
          $ref: '#/responses/conflict'
  /streams/delete:
    post:
      tags:
        - stream
      summary: Delete stream
      description: Delete stream
      operationId: deleteStream
      parameters:
        - $ref: '#/parameters/apiKey'
        - name: stream
          in: query
          description: Stream name
          required: true
          type: string
          pattern: '[a-z0-9_]{1,48}'
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/managementRulesIsAbsent'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/notFoundSourceStream'
  /streams/list:
    get:
      tags:
        - stream
      summary: List streams
      description: List streams
      operationId: listStreams
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/apiKey'
      responses:
        '200':
          description: List of streams
          schema:
            type: array
            items:
              type: string
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/unauthorized'
  /streams/increasePartitions:
    post:
      tags:
        - stream
      summary: Increase stream partition count
      description: Increase stream partition count
      operationId: increasePartitions
      parameters:
        - $ref: '#/parameters/apiKey'
        - name: stream
          in: query
          description: Stream name
          required: true
          type: string
          pattern: '[a-z0-9_]{1,48}'
        - name: newPartitions
          in: query
          description: New partitions count
          required: true
          type: integer
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/managementRulesIsAbsent'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/notFoundSourceStream'
        '409':
          $ref: '#/responses/partitionConflict'
  /streams/changeTtl:
    post:
      tags:
        - stream
      summary: Change stream ttl
      description: Change stream ttl
      operationId: changeStreamTtl
      parameters:
        - $ref: '#/parameters/apiKey'
        - name: stream
          in: query
          description: Stream name
          required: true
          type: string
          pattern: '[a-z0-9_]{1,48}'
        - name: newTtl
          in: query
          description: New ttl
          required: true
          type: integer
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/managementRulesIsAbsent'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/notFoundSourceStream'
  /streams/changeDescription:
    post:
      tags:
        - stream
      summary: Change stream description
      description: Change stream description
      operationId: changeStreamDescription
      parameters:
        - $ref: '#/parameters/apiKey'
        - name: stream
          in: query
          description: Stream name
          required: true
          type: string
          pattern: '[a-z0-9_]{1,48}'
        - name: newDescription
          in: query
          description: New description
          required: true
          type: string
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/managementRulesIsAbsent'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/notFoundSourceStream'
  /streams/info:
    get:
      tags:
        - stream
      summary: Stream info
      description: Stream info
      operationId: streamInfo
      parameters:
        - $ref: '#/parameters/apiKey'
        - name: stream
          in: query
          description: Stream name
          required: true
          type: string
          pattern: '[a-z0-9_]{1,48}'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/stream'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/managementRulesIsAbsent'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/notFoundSourceStream'
  /timelines/create:
    post:
      tags:
        - timeline
      summary: Create timeline
      description: Create timeline
      operationId: createTimeline
      parameters:
        - $ref: '#/parameters/apiKey'
        - name: body
          in: body
          description: CreateTimelineRequest
          schema:
            $ref: '#/definitions/timeline'
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/managementRulesIsAbsent'
        '403':
          $ref: '#/responses/forbidden'
        '409':
          $ref: '#/responses/conflict'
  /timelines/delete:
    post:
      tags:
        - timeline
      summary: Delete timeline
      description: Delete timeline
      operationId: deleteTimeline
      parameters:
        - $ref: '#/parameters/apiKey'
        - name: timeline
          in: query
          description: Timeline name
          required: true
          type: string
          pattern: '[a-z0-9_]{1,48}'
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/managementRulesIsAbsent'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/notFoundSourceTimeline'
  /timelines/list:
    get:
      tags:
        - timeline
      summary: List timelines
      description: List timelines
      operationId: listTimelines
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/apiKey'
      responses:
        '200':
          description: List of timelines
          schema:
            type: array
            items:
              type: string
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/absentApikey'
  /timelines/changeTtl:
    post:
      tags:
        - timeline
      summary: Change timeline ttl
      description: Change timeline ttl
      operationId: changeTimelineTtl
      parameters:
        - $ref: '#/parameters/apiKey'
        - name: timeline
          in: query
          description: Timeline name
          required: true
          type: string
          pattern: '[a-z0-9_]{1,48}'
        - name: newTtl
          in: query
          description: New ttl
          required: true
          type: integer
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/managementRulesIsAbsent'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/notFoundSourceTimeline'
  /timelines/info:
    get:
      tags:
        - timeline
      summary: Timeline info
      description: Timeline info
      operationId: timelineInfo
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/apiKey'
        - name: timeline
          in: query
          description: Timeline name
          required: true
          type: string
          pattern: '[a-z0-9_]{1,48}'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/timeline'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/managementRulesIsAbsent'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          $ref: '#/responses/notFoundSourceTimeline'
  /rules/set:
    post:
      tags:
        - rules
      summary: Set rules
      description: Set rules
      operationId: setRules
      parameters:
        - $ref: '#/parameters/masterApiKey'
        - name: key
          in: query
          description: API key for which rule is set
          required: true
          type: string
          pattern: '[a-zA-Z0-9_\-]+'
        - name: pattern
          in: query
          description: Pattern for stream or timeline names
          required: true
          type: string
          pattern: '[a-z0-9_\*\?]+'
        - name: rights
          in: query
          description: Combination of read, write and modified rights
          required: true
          type: string
          enum:
            - '---'
            - 'r--'
            - '-w-'
            - '--m'
            - 'rw-'
            - 'r-m'
            - '-wm'
            - 'rwm'
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/unauthorized'
  /rules/list:
    get:
      tags:
        - rules
      summary: List rules
      description: List rules
      operationId: listRules
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/masterApiKey'
      responses:
        '200':
          description: List of rules
          schema:
            type: array
            items:
              type: string
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/unauthorized'
  /blacklist/add:
    post:
      tags:
        - blacklist
      summary: Add apiKey to blacklist
      description: Add apiKey to blacklist
      operationId: addApiKeyToBlacklist
      parameters:
        - $ref: '#/parameters/masterApiKey'
        - name: key
          in: query
          description: API key for adding to blacklist
          required: true
          type: string
          pattern: '[a-zA-Z0-9_\-]+'
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/unauthorized'
  /blacklist/remove:
    post:
      tags:
        - blacklist
      summary: Remove apiKey from blacklist
      description: Remove apiKey from blacklist
      operationId: removeApiKeyFromBlacklist
      parameters:
        - $ref: '#/parameters/masterApiKey'
        - name: key
          in: query
          description: API key for removing from blacklist
          required: true
          type: string
          pattern: '[a-zA-Z0-9_\-]+'
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/unauthorized'
  /blacklist/list:
    get:
      tags:
        - blacklist
      summary: List blacklist
      description: List blacklist
      operationId: listBlacklist
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/masterApiKey'
      responses:
        '200':
          description: List of blacklist API-keys
          schema:
            type: array
            items:
              type: string
        '400':
          $ref: '#/responses/badRequest'
        '401':
          $ref: '#/responses/unauthorized'
  /routing/sink/sentry/routes:
    get:
      tags:
        - sentry-routing
      summary: "List of Sentry routes"
      description: "This method returns all available Sentry routes."
      parameters:
        - $ref: '#/parameters/masterApiKey'
      produces:
        - application/json
      responses:
        '200':
          description: "List of Sentry routes."
          schema:
            type: array
            items:
              $ref: '#/definitions/sentry-route-with-id'
        '401':
          $ref: '#/responses/unauthorized'
    post:
      tags:
        - sentry-routing
      summary: Create new Sentry route
      description: This method creates new Sentry route
      parameters:
        - $ref: '#/parameters/masterApiKey'
        - name: body
          in: body
          description: Route parameters
          required: true
          schema:
            $ref: '#/definitions/sentry-route'
      consumes:
        - application/json
      produces:
        - application/json
        - plain/text
      responses:
        '200':
          description: "Route created successfully."
          schema:
            type: object
            properties:
              routeId:
                type: string
                example: "4c4bd0d7-914d-49e1-bec4-2b83a1e9a146"
        '400':
          description: "Bad route were given. Will return text error description in the body."
        '401':
          $ref: '#/responses/unauthorized'
  /routing/sink/sentry/routes/{routeId}:
    get:
      tags:
        - sentry-routing
      summary: "Get Route by Id"
      description: "This method returns route data by given route id."
      produces:
        - application/json
      responses:
        '200':
          description: "Returns found route data"
          schema:
            $ref: '#/definitions/sentry-route'
        '401':
          $ref: '#/responses/unauthorized'
    post:
      tags:
        - sentry-routing
      summary: "Change Sentry route"
      description: "This method changes existent Sentry route."
      parameters:
        - $ref: '#/parameters/masterApiKey'
        - name: routeId
          description: Id of route that must be changed
          in: path
          required: true
          type: string
        - name: body
          in: body
          description: Route parameters
          required: true
          schema:
            $ref: '#/definitions/sentry-route'
      consumes:
        - application/json
      produces:
        - plain/text
      responses:
        '200':
          description: "Route successfully changed."
        '400':
          description: "Bad route were given. Will return text error description in the body."
        '401':
          $ref: '#/responses/unauthorized'
    delete:
      tags:
        - sentry-routing
      summary: Remove Sentry route
      description: Remove Sentry route
      parameters:
        - $ref: '#/parameters/masterApiKey'
        - name: routeId
          description: "Id of route that must be changed."
          in: path
          required: true
          type: string
      produces:
        - plain/text
      responses:
        '200':
          description: "Route successfully removed."
        '400':
          description: "Bad route given"
        '401':
          $ref: '#/responses/unauthorized'
  /routing/sink/sentry/config:
    get:
      tags:
        - sentry-routing
      summary: "Read route engine configuration for Sentry routing"
      description: "This method returns route engine configuration for Sentry routing."
      parameters:
        - $ref: '#/parameters/masterApiKey'
      produces:
        - application/json
        - plain/text
      responses:
        '200':
          description: "Current routing engine configuration."
          schema:
            $ref: '#/definitions/decision-tree-engine-config'
        '401':
          $ref: '#/responses/unauthorized'
    post:
      tags:
        - sentry-routing
      summary: "Change route engine configuration for Sentry routing"
      description: "This method changes route engine configuration for Sentry routing."
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/masterApiKey'
        - name: body
          in: body
          description: "Routing engine configuration."
          required: true
          schema:
            $ref: '#/definitions/decision-tree-engine-config'
      responses:
        '200':
          description: "Configuration successfully applied."
        '400':
          description: "Bad routing engine configuration were given."
        '401':
          $ref: '#/responses/unauthorized'
definitions:
  stream:
    type: object
    properties:
      type:
        type: string
        description: stream type
        enum:
          - base
          - derived
      name:
        type: string
      partitions:
        type: integer
      shardingKey:
        type: array
        items:
          type: string
      ttl:
        type: integer
      description:
        type: string
      streams:
        type: array
        description: sources stream names
        items:
          type: string
      filters:
        type: array
        items:
          type: string
    example:
      type: base
      name: project_test_stream_0
      partitions: 1
      shardingKey: []
      ttl: 3600000
  timeline:
    type: object
    properties:
      name:
        type: string
      slices:
        type: integer
      shardingKey:
        type: array
        items:
          type: string
      ttl:
        type: integer
      timetrapSize:
        type: integer
      streams:
        type: array
        items:
          type: string
      filters:
        type: array
        items:
          type: string
  about:
    type: object
    properties:
      applicationName:
        type: string
      applicationId:
        type: string
      version:
        type: string
      commitId:
        type: string
      environment:
        type: string
      zone:
        type: string
      hostName:
        type: string
      instanceId:
        type: string
  sentry-route:
    type: object
    required:
      - conditions
      - destination
    properties:
      conditions:
        type: object
        additionalProperties:
          type: string
        example: '{ "properties/project": "my-project", "properties/subproject": "my-subproject" }'
      destination:
        type: object
        description: "The destination of log events that are matches conditions"
        properties:
          organization:
            type: string
            description: "Sentry organization name. This field supports interpolations. Interpolation syntax example: {tag:properties/application}"
            example: "my-sentry-organization-name"
          project:
            type: string
            description: "Sentry project name. This field supports interpolations. Interpolation syntax example: {tag:properties/application}"
            example: "{tag:properties/application}"
      description:
        description: "Commentary that can help with route purpose understanding"
        type: string
        example: "This route is required because ..."
  decision-tree-engine-config:
    type: object
    required:
      - allowedTags
    properties:
      allowedTags:
        description: "Allowed tag's paths. Tags that are listed here can be used in conditions of routes and also in destination interpolations. The order of this list specifies identifier's hierarchy."
        example: '[ "properties/project", "properties/subproject", "properties/application", "properties/environment" ]'
        type: array
        items:
          type: string
  sentry-route-with-id:
    allOf:
      - $ref: '#/definitions/sentry-route'
      - type: object
        required:
          - id
        properties:
          id:
            type: string
            example: "4c4bd0d7-914d-49e1-bec4-2b83a1e9a146"

parameters:
  apiKey:
    name: Authorization
    in: header
    type: string
    pattern: '^Hercules apiKey .+'
    required: true
    description: API key for authorization
  masterApiKey:
    name: Authorization
    in: header
    type: string
    pattern: '^Hercules masterApiKey .+'
    required: true
    description: API key for rules management
responses:
  unauthorized:
    description: Unauthorized
  managementRulesIsAbsent:
    description: Management rules for this apiKey is absent
  badRequest:
    description: Bad request
  absentApikey:
    description: Absent apiKey
  forbidden:
    description: Forbidden for this API-key
  notFound:
    description: Not Found
  notFoundSourceStream:
    description: Source stream not found
  notFoundSourceTimeline:
    description: Source timeline not found
  conflict:
    description: Conflict. Entity already exists
  partitionConflict:
    description: Conflict. New partition count less then old
  success:
    description: OK
